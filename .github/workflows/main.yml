name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch :
jobs:

  Build:
      runs-on: ubuntu-latest  
      steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x
          
      - name: Restore dependencies
        working-directory: ./OnlineGames.Server
        run: dotnet restore
        
      - name: Build
        working-directory: ./OnlineGames.Server
        run: dotnet build --no-restore
        
      - name : Upload repo
        uses: actions/upload-artifact@v4
        with:
          name: code
          path: .
          
  Test:
    runs-on: ubuntu-latest
    needs: [Build]

    steps:
    
      - name: Download artifact
        uses: actions/download-artifact@v4
        with: 
          name: code
          path: .

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x
          
      - name: Check Formating
        working-directory: ./OnlineGames.Server
        run: dotnet format --verify-no-changes
        
      - name: Test
        working-directory: ./OnlineGames.Server
        run: dotnet test --no-build --verbosity normal

  Security:
    runs-on: ubuntu-latest
    needs: [Build]

    steps:
    
      - name: Download artifact
        uses: actions/download-artifact@v4
        with: 
          name: code
          path: .

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth $SNYK_TOKEN

      - name: Run Snyk test on .NET project
        working-directory: ./OnlineGames.Server
        run: snyk test --all-projects --severity-threshold=high #--file=./OnlineGames.Server/OnlineGames.Server.sln
        continue-on-error: true

      - name: Monitor in Snyk for high-severity issues
        working-directory: ./OnlineGames.Server
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk monitor --all-projects --severity-threshold=high 
        #continue-on-error: true

  BuildDocker-image:
    runs-on: ubuntu-latest
    needs: [Test,Security]
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps: 
      - name: Download artifact
        uses: actions/download-artifact@v4
        with: 
          name: code
          path: .
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: sashovas
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build  Docker Image Backend
        uses: docker/build-push-action@v4
        with:
          context: ./OnlineGames.Server
          file: ./OnlineGames.Server/Dockerfile 
          push: false
          tags: ghcr.io/sashovas/online_games_api:latest
          outputs: type=docker
          
      - name: Build  Docker Image Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./OnlineGames.Client
          file: ./OnlineGames.Client/Dockerfile 
          push: false
          tags: ghcr.io/sashovas/online_games_frontend:latest
          outputs: type=docker
          
      - name: Export backend image as a tarball
        run: docker save ghcr.io/sashovas/online_games_api:latest -o image_backend.tar
        
      - name: Export frontend image as a tarball
        run: docker save ghcr.io/sashovas/online_games_frontend:latest -o image_frontend.tar
        
      - name: Upload Docker images
        uses: actions/upload-artifact@v3
        with:
          name: built-image
          path: .
          
  ScanDocker-imageWithTrivy:
    runs-on: ubuntu-latest
    needs: [BuildDocker-image] 

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: built-image

      - name: Load Docker image from tarball
        run: docker load -i image_backend.tar

      - name: Download Trivy
        run: |
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          sudo chmod +x /usr/bin/trivy

      - name: Run Trivy
        run: trivy image --severity HIGH,CRITICAL ghcr.io/sashovas/online_games_api:latest
        
  PushDocker-image:
    runs-on: ubuntu-latest
    needs: [ScanDocker-imageWithTrivy]  

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: built-image

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load Docker backend image from tarball
        run: docker load -i image_backend.tar

      - name: Push backend Docker image
        run: docker push ghcr.io/sashovas/online_games_api:latest

      - name: Load Docker frontend image from tarball
        run: docker load -i image_frontend.tar
        
      - name: Push frontend Docker image
        run: docker push ghcr.io/sashovas/online_games_frontend:latest

  DeployToMiniKube:
    runs-on: ubuntu-latest
    name: build example and deploy to minikube
    steps:
    
    - uses: actions/checkout@v4
        
    - name: Start minikube
      uses: medyagh/setup-minikube@latest
      
    - name: Try the cluster!
      run: kubectl get pods -A

    - name: Deploy to minikube
      run:
        kubectl apply -f deployment.yaml
        kubectl wait --for=condition=Ready pod/frontend


